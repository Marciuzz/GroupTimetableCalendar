package grouptimetable;

import com.github.lgooddatepicker.optionalusertools.CalendarListener;
import com.github.lgooddatepicker.optionalusertools.DateChangeListener;
import com.github.lgooddatepicker.zinternaltools.CalendarSelectionEvent;
import com.github.lgooddatepicker.zinternaltools.DateChangeEvent;
import com.github.lgooddatepicker.zinternaltools.YearMonthChangeEvent;
import java.awt.Component;

import java.time.LocalDate;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

public class MainJFrame extends javax.swing.JFrame {
    public Database db = new Database();
    public String personListItem;
    public String currentDate;
    
    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
        calendarPanel1.setSelectedDate(LocalDate.now());
        calendarPanel1.addCalendarListener(new SampleCalendarListener());
        //should return an object, so we can access name AND type (class name)
        this.personListItem = db.getFirstPersonInThePersonList();
        getTimetable(LocalDate.now().toString(), personListItem);
        getPersonList();
        //setting default current time to now
        datePicker1.setDate(LocalDate.now());
        datePicker1.addDateChangeListener(new SampleDateChangeListener());
        currentDate = datePicker1.getDateStringOrEmptyString();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        calendarPanel1 = new com.github.lgooddatepicker.components.CalendarPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        datePicker1 = new com.github.lgooddatepicker.components.DatePicker();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GroupTimetableProject");

        jPanel1.setName(""); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("Create Event");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 10, 130, 30));

        jLabel1.setFont(new java.awt.Font("Lucida Sans", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Date");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, calendarPanel1, org.jdesktop.beansbinding.ELProperty.create("${selectedDate.year}-${selectedDate.monthValue}-${selectedDate.dayOfMonth}"), jLabel1, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceNullValue("Select a date");
        bindingGroup.addBinding(binding);

        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 180, -1));

        jLabel2.setFont(new java.awt.Font("Lucida Sans", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Day");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, calendarPanel1, org.jdesktop.beansbinding.ELProperty.create("${selectedDate.dayOfWeek.value}"), jLabel2, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jLabel2PropertyChange(evt);
            }
        });
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 170, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Time", "Subject", "Delete", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable1.setFocusable(false);
        jTable1.setRowHeight(32);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(100);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(100);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(50);
            jTable1.getColumnModel().getColumn(3).setMinWidth(0);
            jTable1.getColumnModel().getColumn(3).setMaxWidth(0);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 94, 920, 540));

        jLabel4.setText("You can manually set today's date on the right to simulate custom current time and test the program. Then you can select a date in the calendar like in usual timetables.");
        jLabel4.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jList1);

        jButton2.setText("Add Person");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Today is:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 925, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(calendarPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(calendarPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        String selected = jList1.getSelectedValue();
        this.personListItem = selected;
        getTimetable(calendarPanel1.getSelectedDate().toString(), this.personListItem);
    }//GEN-LAST:event_jList1MouseClicked

    private void jLabel2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jLabel2PropertyChange
        if(!jLabel2.getText().isEmpty())
        {
            if (jLabel2.getText().equals("1")) {
                jLabel2.setText("Monday");
            } else if (jLabel2.getText().equals("2")) {
                jLabel2.setText("Tuesday");
            } else if (jLabel2.getText().equals("3")) {
                jLabel2.setText("Wednesday");
            } else if (jLabel2.getText().equals("4")) {
                jLabel2.setText("Thursday");
            } else if (jLabel2.getText().equals("5")) {
                jLabel2.setText("Friday");
            } else if (jLabel2.getText().equals("6")) {
                jLabel2.setText("Saturday");
            } else if (jLabel2.getText().equals("7")) {
                jLabel2.setText("Sunday");
            }
        }
    }//GEN-LAST:event_jLabel2PropertyChange

    /* TO REMOVE */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        NewEventJFrame newEvent = new NewEventJFrame();
        newEvent.setLocationRelativeTo(null);
        newEvent.setVisible(true);
        newEvent.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                if (newEvent.eventDate != null && newEvent.eventName != null && newEvent.eventHourTime != null && newEvent.eventType != null) {
                    //check if new event date is after todays date
                    if (newEvent.eventDate.compareTo(datePicker1.getDate().toString()) >=0 ){
                        if (newEvent.eventType.equals("personal")) {
                            String personName = personListItem.substring(0, personListItem.indexOf("[")-1);
                            Event newEvt = new Event(String.valueOf(db.getEventCount()),newEvent.eventDate,newEvent.eventHourTime,newEvent.eventName,personName);
                            db.addItemToEventsDatabase(newEvt);
                        } else {
                            Event newEvt = new Event(String.valueOf(db.getEventCount()),newEvent.eventDate,newEvent.eventHourTime,newEvent.eventName,newEvent.eventType);
                            db.addItemToEventsDatabase(newEvt);
                        }
                        //refresh timetable after an event is created
                        getTimetable(LocalDate.now().toString(), personListItem);
                    } else {
                        System.out.println("Event was not created - date is already in the past");
                    }
                } else {
                    System.out.println("Event was not created - please fill all the fields");
                }
            }
        });
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // Delete event from database
        int col = jTable1.columnAtPoint(evt.getPoint());
        int row = jTable1.getSelectedRow();
        if (col==2){
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog (null, "Are you sure you want to delete this event?","Warning",dialogButton);
                if(dialogResult == JOptionPane.YES_OPTION){
                    //3rd column is ID (hidden)
                    String value = jTable1.getModel().getValueAt(row, 3).toString();
                    db.removeItemFromDatabase(value);
                    getTimetable(calendarPanel1.getSelectedDate().toString(), personListItem);
                }
            }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        NewPersonJFrame newPerson = new NewPersonJFrame();
        newPerson.setLocationRelativeTo(null);
        newPerson.setVisible(true);
        newPerson.addWindowListener(new java.awt.event.WindowAdapter() {
        @Override
        public void windowClosing(java.awt.event.WindowEvent windowEvent) {
            if (newPerson.typeOfPerson.equals("MIFSAStudent")){
                MIFSAStudent mifsa = new MIFSAStudent(newPerson.Name, newPerson.Surname, newPerson.subjectOfStudies, newPerson.yearOfStudies);
                db.addMIFSAToPersonsDatabase(mifsa);
            }
            else if (newPerson.typeOfPerson.equals("Student")){
                Student stud = new Student(newPerson.Name, newPerson.Surname, newPerson.subjectOfStudies, newPerson.yearOfStudies);
                db.addStudentToPersonsDatabase(stud);
            }
            else if (newPerson.typeOfPerson.equals("Teacher")){
                //DEFAULT faculty for now
                Teacher teac = new Teacher(newPerson.Name, newPerson.Surname, "MIF");
                db.addTeacherToPersonsDatabase(teac);
            } else {
                System.out.println("New person was not created!");
            }      
        }
    });       
    }//GEN-LAST:event_jButton2ActionPerformed
    
    public void addPersonToPersonList(List<Person> personList) {
        jList1.setModel(new DefaultListModel());
        DefaultListModel model = (DefaultListModel) jList1.getModel();
        for(Person p : personList){
            //check child classes here, MIFSAStudent is also a Student, so check first
            if (p instanceof Teacher) {
                model.addElement(p.getName()+" "+p.getLastName()+" [TE]");
            } else if (p instanceof MIFSAStudent) {
                model.addElement(p.getName()+" "+p.getLastName()+" [SA]");
            } else if (p instanceof Student) {
                model.addElement(p.getName()+" "+p.getLastName()+" [ST]");
            } 
        }    
        jList1.setModel(model);     
        jList1.setSelectedIndex(0);
    }
    
    public String getCurrentDate(){
        return currentDate;
    }
    public void getPersonList() {
        List<Person> personList = db.getPersonList();
        addPersonToPersonList(personList);
    }
    public void clearTimetable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
    }
    public void addEventsToTimetable(List<Event> eventList) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        //center labels
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        /////////////////
        TableCellRenderer buttonRenderer = new JTableButtonRenderer();
        for (int i=0; i<jTable1.getColumnCount(); i++){
            
            /////////////////////////////////////////
            if (i==2) {
                jTable1.getColumnModel().getColumn(i).setCellRenderer(buttonRenderer); 
            } else {
                jTable1.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            }
        }
        for (int i = 0; i < eventList.size(); i++) {
            if(eventList.get(i) != null) {
                Event temp = eventList.get(i);
                JButton jb = new JButton("X");
                Object[] obj = new Object[]{temp.getEventHourTime(), temp.getEventName(), jb, eventList.get(i).eventId};
                model.addRow(obj);
            }     
	}
    }
    public List<Event> sortTimetableByEventStartTime(List<Event> list1, List<Event> list2) {
        list1.addAll(list2);
        Collections.sort(list1, new CustomComparator());
        return list1;
    }
    public void getTimetable(String date, String personListItem) {
        //get Person's class from [ ] and add it to the personList, get the name from the personListItem
        String personType = personListItem.substring(personListItem.indexOf("[") + 1, personListItem.indexOf("]"));
        String personName = personListItem.substring(0, personListItem.indexOf("[")-1);
        clearTimetable();
        List<Event> commonEventsOfTheDay = db.getCommonEventsOfTheDay(date);
        List<Event> personalEventsOfTheDay = db.getPersonalEventsOfTheDay(date, personName);
        //We can re-use a getPersonalEventsOfTheDay method in the Database class, and send a "SA" flag, so we can retrieve all mifsa events if it is a MIFSAStudent
                
        if (personType.equals("SA")){
            List<Event> sortedTimetable = sortTimetableByEventStartTime(commonEventsOfTheDay, personalEventsOfTheDay);
            List<Event> mifsaEventsOfTheDay = db.getPersonalEventsOfTheDay(date, personType);
            List<Event> sortedTimetable2 = sortTimetableByEventStartTime(mifsaEventsOfTheDay, sortedTimetable);
            addEventsToTimetable(sortedTimetable2);
        } else {
            List<Event> sortedTimetable = sortTimetableByEventStartTime(commonEventsOfTheDay, personalEventsOfTheDay);
            addEventsToTimetable(sortedTimetable);
        }
    }
    public class SampleDateChangeListener implements DateChangeListener {
        /**
         * @param event has all info from event
         * we get date from date picker and set todays date as selectedDate in main CalendarPanel
         */
        @Override
        public void dateChanged(DateChangeEvent event) {
            calendarPanel1.setSelectedDate(datePicker1.getDate());
        }
    }
    public class SampleCalendarListener implements CalendarListener {

        /**
         * selectedDateChanged, This function will be called each time that a date is selected in
         * the independent CalendarPanel. The new and old selected dates are supplied in the event
         * object. These parameters may contain null, which represents a cleared or empty date.
         *
         * By intention, this function will be called even if the user selects the same date value
         * twice in a row. This is so that the programmer can catch all events of interest.
         * Duplicate events can optionally be detected with the function
         * CalendarSelectionEvent.isDuplicate().
         */
        @Override
        public void selectedDateChanged(CalendarSelectionEvent event) {
            LocalDate oldDate = event.getOldDate();
            LocalDate newDate = event.getNewDate();
            getTimetable(newDate.toString(), personListItem);
        }
        @Override
        public void yearMonthChanged(YearMonthChangeEvent event) {
            /*YearMonth oldYearMonth = event.getOldYearMonth();
            YearMonth newYearMonth = event.getNewYearMonth();
            String oldYearMonthString = oldYearMonth.toString();
            String newYearMonthString = newYearMonth.toString();
            System.out.println(oldYearMonthString+" "+newYearMonthString);*/
        }
    }
    public class CustomComparator implements Comparator<Event> {
    @Override
    public int compare(Event e1, Event e2) {
        return e1.getEventHourTime().compareTo(e2.getEventHourTime());
    }
    }
    public class JTableButtonRenderer implements TableCellRenderer {        
    @Override 
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        JButton button = (JButton)value;
        return button;  
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.github.lgooddatepicker.components.CalendarPanel calendarPanel1;
    private com.github.lgooddatepicker.components.DatePicker datePicker1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
